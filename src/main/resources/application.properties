spring.application.name=proposta

spring.datasource.platform=postgres
spring.datasource.url=jdbc:postgresql://${HOST_BANCO:localhost:5433}/proposta
spring.datasource.username=proposta
spring.datasource.password=proposta
spring.jpa.hibernate.ddl-auto=update


feign.httpclient.default.connection-timeout=50000
feign.client.config.default.read-timeout=10000

analise.host=${ANALISE_URL:http://localhost:9999}

cartoes.host=${CARTOES_URL:http://localhost:8888}
cartoes.periodicidade=${PERIODICIDADE_CARTOES:60000}

## spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/nosso-cartao}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/nosso-cartao/protocol/openid-connect/certs}

## prometheus
management.endpoints.web.exposure.include=info,health,prometheus
management.endpoints.prometheus.enabled=true
management.metrics.tags.aplicacao=${NOME_DA_APLICACAO:serviço de proposta}
management.metrics.tags.ambiente=${AMBIENTE:desenvolvimento}

## Jaeger
# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}
# Jaeger - Nome do serviço
opentracing.jaeger.service-name=${spring.application.name}
# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}
# Jaeger - Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}
